From 831aa2f02277d4184cde9f0314f1d84be0400ced Mon Sep 17 00:00:00 2001
From: Leonid Komarianskyi <leonid_komarianskyi@epam.com>
Date: Mon, 15 Jan 2024 23:30:02 +0200
Subject: [PATCH 4/4] can/canfd: renesas: update code to support S4 board

Update Source code support canfd device in rcar-canfd.c.

Signed-off-by: Phat Pham <phat.pham.zg@renesas.com>
Signed-off-by: Leonid Komarianskyi <leonid_komarianskyi@epam.com>
---
 drivers/net/can/rcar/rcar_can.c   |  28 ++--
 drivers/net/can/rcar/rcar_canfd.c | 211 +++++++++++++++++++++++-------
 2 files changed, 177 insertions(+), 62 deletions(-)

diff --git a/drivers/net/can/rcar/rcar_can.c b/drivers/net/can/rcar/rcar_can.c
index 48575900adb7..134eda66f0dc 100644
--- a/drivers/net/can/rcar/rcar_can.c
+++ b/drivers/net/can/rcar/rcar_can.c
@@ -235,11 +235,8 @@ static void rcar_can_error(struct net_device *ndev)
 	if (eifr & (RCAR_CAN_EIFR_EWIF | RCAR_CAN_EIFR_EPIF)) {
 		txerr = readb(&priv->regs->tecr);
 		rxerr = readb(&priv->regs->recr);
-		if (skb) {
+		if (skb)
 			cf->can_id |= CAN_ERR_CRTL;
-			cf->data[6] = txerr;
-			cf->data[7] = rxerr;
-		}
 	}
 	if (eifr & RCAR_CAN_EIFR_BEIF) {
 		int rx_errors = 0, tx_errors = 0;
@@ -339,6 +336,9 @@ static void rcar_can_error(struct net_device *ndev)
 		can_bus_off(ndev);
 		if (skb)
 			cf->can_id |= CAN_ERR_BUSOFF;
+	} else if (skb) {
+		cf->data[6] = txerr;
+		cf->data[7] = rxerr;
 	}
 	if (eifr & RCAR_CAN_EIFR_ORIF) {
 		netdev_dbg(priv->ndev, "Receive overrun error interrupt\n");
@@ -846,10 +846,12 @@ static int __maybe_unused rcar_can_suspend(struct device *dev)
 	struct rcar_can_priv *priv = netdev_priv(ndev);
 	u16 ctlr;
 
-	if (netif_running(ndev)) {
-		netif_stop_queue(ndev);
-		netif_device_detach(ndev);
-	}
+	if (!netif_running(ndev))
+		return 0;
+
+	netif_stop_queue(ndev);
+	netif_device_detach(ndev);
+
 	ctlr = readw(&priv->regs->ctlr);
 	ctlr |= RCAR_CAN_CTLR_CANM_HALT;
 	writew(ctlr, &priv->regs->ctlr);
@@ -868,6 +870,9 @@ static int __maybe_unused rcar_can_resume(struct device *dev)
 	u16 ctlr;
 	int err;
 
+	if (!netif_running(ndev))
+		return 0;
+
 	err = clk_enable(priv->clk);
 	if (err) {
 		netdev_err(ndev, "clk_enable() failed, error %d\n", err);
@@ -881,10 +886,9 @@ static int __maybe_unused rcar_can_resume(struct device *dev)
 	writew(ctlr, &priv->regs->ctlr);
 	priv->can.state = CAN_STATE_ERROR_ACTIVE;
 
-	if (netif_running(ndev)) {
-		netif_device_attach(ndev);
-		netif_start_queue(ndev);
-	}
+	netif_device_attach(ndev);
+	netif_start_queue(ndev);
+
 	return 0;
 }
 
diff --git a/drivers/net/can/rcar/rcar_canfd.c b/drivers/net/can/rcar/rcar_canfd.c
index b458b5fd7900..e4f820308954 100644
--- a/drivers/net/can/rcar/rcar_canfd.c
+++ b/drivers/net/can/rcar/rcar_canfd.c
@@ -203,7 +203,7 @@
 #define RCANFD_FDCFG_FDOE		BIT(28)
 #define RCANFD_FDCFG_TDCE		BIT(9)
 #define RCANFD_FDCFG_TDCOC		BIT(8)
-#define RCANFD_FDCFG_TDCO(x)		(((x) & 0x7f) >> 16)
+#define RCANFD_FDCFG_TDCO(x)		(((x) & 0xff) << 16)
 
 /* RSCFDnCFDRFCCx */
 #define RCANFD_RFCC_RFIM		BIT(12)
@@ -506,6 +506,7 @@
 /* R-Car V3U Classical and CAN FD mode specific register map */
 #define RCANFD_V3U_CFDCFG		(0x1314)
 #define RCANFD_V3U_DCFG(m)		(0x1400 + (0x20 * (m)))
+#define RCANFD_V3U_FDCFG(m)		(0x1404 + (0x20 * (m)))
 
 #define RCANFD_V3U_GAFL_OFFSET		(0x1800)
 
@@ -574,6 +575,7 @@ struct rcar_canfd_channel {
 
 enum rcar_canfd_chip_id {
 	R8A779G0,
+	R8A779F0,
 	R8A779A0,
 	GEN3,
 };
@@ -734,13 +736,17 @@ static int rcar_canfd_reset_controller(struct rcar_canfd_global *gpriv)
 	rcar_canfd_write(gpriv->base, RCANFD_GERFL, 0x0);
 
 	/* Set the controller into appropriate mode */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		if (gpriv->fdmode)
-			rcar_canfd_set_bit(gpriv->base, RCANFD_V3U_CFDCFG,
-					   RCANFD_FDCFG_FDOE);
+		{
+			for_each_set_bit(ch, &gpriv->channels_mask, gpriv->max_channels)
+				rcar_canfd_set_bit(gpriv->base, RCANFD_V3U_FDCFG(ch),
+						   RCANFD_FDCFG_FDOE);
+		}
 		else
-			rcar_canfd_set_bit(gpriv->base, RCANFD_V3U_CFDCFG,
-					   RCANFD_FDCFG_CLOE);
+			for_each_set_bit(ch, &gpriv->channels_mask, gpriv->max_channels)
+				rcar_canfd_set_bit(gpriv->base, RCANFD_V3U_FDCFG(ch),
+						   RCANFD_FDCFG_CLOE);
 	} else {
 		if (gpriv->fdmode)
 			rcar_canfd_set_bit(gpriv->base, RCANFD_GRMCFG,
@@ -801,7 +807,7 @@ static void rcar_canfd_configure_controller(struct rcar_canfd_global *gpriv)
 }
 
 static void rcar_canfd_configure_afl_rules(struct rcar_canfd_global *gpriv,
-					   u32 ch)
+					   u32 ch, int num_ch_enabled)
 {
 	u32 cfg;
 	int offset, start, page, num_rules = RCANFD_CHANNEL_NUMRULES;
@@ -812,7 +818,7 @@ static void rcar_canfd_configure_afl_rules(struct rcar_canfd_global *gpriv,
 	} else {
 		/* Get number of Channel 0 rules and adjust */
 		cfg = rcar_canfd_read(gpriv->base, RCANFD_V3U_GAFLCFG(ch));
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 			start = ch * num_rules;
 		else
 			start = RCANFD_GAFLCFG_GETRNC(0, cfg);
@@ -821,24 +827,28 @@ static void rcar_canfd_configure_afl_rules(struct rcar_canfd_global *gpriv,
 	/* Enable write access to entry */
 	page = RCANFD_GAFL_PAGENUM(start);
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+	{
 		rcar_canfd_set_bit(gpriv->base, RCANFD_GAFLECTR,
 				   (RCANFD_V3U_GAFLECTR_AFLPN(page) |
 					RCANFD_GAFLECTR_AFLDAE));
+	}
 	else
 		rcar_canfd_set_bit(gpriv->base, RCANFD_GAFLECTR,
 				   (RCANFD_GAFLECTR_AFLPN(page) |
 					RCANFD_GAFLECTR_AFLDAE));
 
 	/* Write number of rules for channel */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+	{
 		rcar_canfd_set_bit(gpriv->base, RCANFD_V3U_GAFLCFG(ch),
 				   RCANFD_V3U_GAFLCFG_SETRNC(ch, num_rules));
+	}
 	else
 		rcar_canfd_set_bit(gpriv->base, RCANFD_GAFLCFG0,
 				   RCANFD_GAFLCFG_SETRNC(ch, num_rules));
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		offset = RCANFD_V3U_GAFL_OFFSET;
 	} else {
 		if (gpriv->fdmode)
@@ -848,13 +858,13 @@ static void rcar_canfd_configure_afl_rules(struct rcar_canfd_global *gpriv,
 	}
 
 	/* Accept all IDs */
-	rcar_canfd_write(gpriv->base, RCANFD_GAFLID(offset, start), 0);
+	rcar_canfd_write(gpriv->base, RCANFD_GAFLID(offset, num_ch_enabled), 0);
 	/* IDE or RTR is not considered for matching */
-	rcar_canfd_write(gpriv->base, RCANFD_GAFLM(offset, start), 0);
+	rcar_canfd_write(gpriv->base, RCANFD_GAFLM(offset, num_ch_enabled), 0);
 	/* Any data length accepted */
-	rcar_canfd_write(gpriv->base, RCANFD_GAFLP0(offset, start), 0);
+	rcar_canfd_write(gpriv->base, RCANFD_GAFLP0(offset, num_ch_enabled), 0);
 	/* Place the msg in corresponding Rx FIFO entry */
-	rcar_canfd_set_bit(gpriv->base, RCANFD_GAFLP1(offset, start),
+	rcar_canfd_set_bit(gpriv->base, RCANFD_GAFLP1(offset, num_ch_enabled),
 			   RCANFD_GAFLP1_GAFLFDP(ridx));
 
 	/* Disable write access to page */
@@ -879,10 +889,14 @@ static void rcar_canfd_configure_rx(struct rcar_canfd_global *gpriv, u32 ch)
 
 	cfg = (RCANFD_RFCC_RFIM | RCANFD_RFCC_RFDC(rfdc) |
 		RCANFD_RFCC_RFPLS(rfpls) | RCANFD_RFCC_RFIE);
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+	{
 		rcar_canfd_write(gpriv->base, RCANFD_V3U_RFCC(ridx), cfg);
+	}
 	else
+	{
 		rcar_canfd_write(gpriv->base, RCANFD_RFCC(ridx), cfg);
+	}
 }
 
 static void rcar_canfd_configure_tx(struct rcar_canfd_global *gpriv, u32 ch)
@@ -904,7 +918,7 @@ static void rcar_canfd_configure_tx(struct rcar_canfd_global *gpriv, u32 ch)
 	else
 		cfpls = 0;	/* b000 - Max 8 bytes payload */
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		cfg = (RCANFD_V3U_CFCC_CFTML(cftml) | RCANFD_V3U_CFCC_CFM(cfm) |
 			RCANFD_V3U_CFCC_CFIM | RCANFD_V3U_CFCC_CFDC(cfdc) |
 			RCANFD_V3U_CFCC_CFPLS(cfpls) | RCANFD_V3U_CFCC_CFTXIE);
@@ -919,8 +933,10 @@ static void rcar_canfd_configure_tx(struct rcar_canfd_global *gpriv, u32 ch)
 	}
 	if (gpriv->fdmode) {
 		/* Clear FD mode specific control/status register */
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+		{
 			addr = RCANFD_V3U_CFFDCSTS(ch, RCANFD_CFFIFO_IDX);
+		}
 		else
 			addr = RCANFD_F_CFFDCSTS(ch, RCANFD_CFFIFO_IDX);
 
@@ -938,7 +954,9 @@ static void rcar_canfd_enable_global_interrupts(struct rcar_canfd_global *gpriv)
 	/* Global interrupts setup */
 	ctr = RCANFD_GCTR_MEIE;
 	if (gpriv->fdmode)
+	{
 		ctr |= RCANFD_GCTR_CFMPOFIE;
+	}
 
 	rcar_canfd_set_bit(gpriv->base, RCANFD_GCTR, ctr);
 }
@@ -1005,7 +1023,7 @@ static void rcar_canfd_global_error(struct net_device *ndev)
 		stats->tx_dropped++;
 	}
 	if (gerfl & RCANFD_GERFL_MES) {
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 			addr = RCANFD_V3U_CFSTS(ch, RCANFD_CFFIFO_IDX);
 		else
 			addr = RCANFD_CFSTS(ch, RCANFD_CFFIFO_IDX);
@@ -1018,7 +1036,7 @@ static void rcar_canfd_global_error(struct net_device *ndev)
 			rcar_canfd_write(priv->base, addr,
 					 sts & ~RCANFD_CFSTS_CFMLT);
 		}
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 			addr = RCANFD_V3U_RFSTS(ridx);
 		else
 			addr = RCANFD_RFSTS(ridx);
@@ -1171,8 +1189,10 @@ static void rcar_canfd_tx_done(struct net_device *ndev)
 	u32 ch = priv->channel;
 	struct rcar_canfd_global *gpriv = priv->gpriv;
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+	{
 		addr = RCANFD_V3U_CFSTS(ch, RCANFD_CFFIFO_IDX);
+	}
 	else
 		addr = RCANFD_CFSTS(ch, RCANFD_CFFIFO_IDX);
 
@@ -1227,7 +1247,7 @@ static irqreturn_t rcar_canfd_global_interrupt(int irq, void *dev_id)
 
 		/* Global error interrupts */
 		gerfl = rcar_canfd_read(priv->base, RCANFD_GERFL);
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 			if (unlikely(RCANFD_V3U_GERFL_ERR(gpriv, gerfl)))
 				rcar_canfd_global_error(ndev);
 		} else {
@@ -1235,7 +1255,7 @@ static irqreturn_t rcar_canfd_global_interrupt(int irq, void *dev_id)
 				rcar_canfd_global_error(ndev);
 		}
 		/* Handle Rx interrupts */
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 			addr1 = RCANFD_V3U_RFSTS(ridx);
 			addr2 = RCANFD_V3U_RFCC(ridx);
 		} else {
@@ -1307,6 +1327,7 @@ static irqreturn_t rcar_canfd_channel_interrupt(int irq, void *dev_id)
 		sts = rcar_canfd_read(priv->base, RCANFD_CSTS(ch));
 		txerr = RCANFD_CSTS_TECCNT(sts);
 		rxerr = RCANFD_CSTS_RECCNT(sts);
+		
 		if (unlikely(RCANFD_CERFL_ERR(cerfl)))
 			rcar_canfd_error(ndev, cerfl, txerr, rxerr);
 
@@ -1316,19 +1337,57 @@ static irqreturn_t rcar_canfd_channel_interrupt(int irq, void *dev_id)
 			rcar_canfd_state_change(ndev, txerr, rxerr);
 
 		/* Handle Tx interrupts */
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
+		{
 			addr = RCANFD_V3U_CFSTS(ch, RCANFD_CFFIFO_IDX);
+		}
 		else
+		{
 			addr = RCANFD_CFSTS(ch, RCANFD_CFFIFO_IDX);
+		}
 
 		sts = rcar_canfd_read(priv->base, addr);
 
 		if (likely(sts & RCANFD_CFSTS_CFTXIF))
+		{
 			rcar_canfd_tx_done(ndev);
+		}
 	}
 	return IRQ_HANDLED;
 }
 
+static void rcar_canfd_set_samplepoint(struct net_device *dev)
+{
+	struct rcar_canfd_channel *priv = netdev_priv(dev);
+	u32 ch = priv->channel;
+	u16 tdco;
+	u32 cfg;
+	struct rcar_canfd_global *gpriv = priv->gpriv;
+
+	/* Sample point settings */
+	tdco = 2; /* TDCO = 2Tq */
+
+	/* Transceiver Delay Compensation Offset Configuration */
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
+		cfg = (RCANFD_FDCFG_TDCE |
+			   RCANFD_FDCFG_TDCO(tdco));
+		rcar_canfd_set_bit(priv->base, RCANFD_V3U_FDCFG(ch), cfg);
+	}
+}
+
+static void rcar_canfd_unset_samplepoint(struct net_device *dev)
+{
+	struct rcar_canfd_channel *priv = netdev_priv(dev);
+	u32 ch = priv->channel;
+	u32 cfg;
+	struct rcar_canfd_global *gpriv = priv->gpriv;
+
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
+		cfg = RCANFD_FDCFG_TDCE; /* Disable TDC */
+		rcar_canfd_clear_bit(priv->base, RCANFD_V3U_FDCFG(ch), cfg);
+	}
+}
+
 static void rcar_canfd_set_bittiming(struct net_device *dev)
 {
 	struct rcar_canfd_channel *priv = netdev_priv(dev);
@@ -1342,12 +1401,12 @@ static void rcar_canfd_set_bittiming(struct net_device *dev)
 	/* Nominal bit timing settings */
 	brp = bt->brp - 1;
 	sjw = bt->sjw - 1;
-	tseg1 = bt->prop_seg + bt->phase_seg1 + 1;
+	tseg1 = bt->prop_seg + bt->phase_seg1 - 1;
 	tseg2 = bt->phase_seg2 - 1;
 
 	if (priv->can.ctrlmode & CAN_CTRLMODE_FD) {
 		/* CAN FD only mode */
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 			cfg = (RCANFD_V3U_NCFG_NTSEG1(tseg1) |
 			       RCANFD_V3U_NCFG_NBRP(brp) |
 			       RCANFD_V3U_NCFG_NSJW(sjw) |
@@ -1365,10 +1424,16 @@ static void rcar_canfd_set_bittiming(struct net_device *dev)
 		/* Data bit timing settings */
 		brp = dbt->brp - 1;
 		sjw = dbt->sjw - 1;
-		tseg1 = dbt->prop_seg + dbt->phase_seg1 + 1;
+		tseg1 = dbt->prop_seg + dbt->phase_seg1 - 1;
 		tseg2 = dbt->phase_seg2 - 1;
 
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+		/* Set Secondary Sample Point for high baud rate */
+		if (brp == 0 && tseg1 <= 5 && tseg2 == 1)
+			rcar_canfd_set_samplepoint(dev);
+		else
+			rcar_canfd_unset_samplepoint(dev);
+
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 			cfg = (RCANFD_V3U_DCFG_DTSEG1(tseg1) |
 			       RCANFD_V3U_DCFG_DBRP(brp) |
 			       RCANFD_V3U_DCFG_DSJW(sjw) |
@@ -1387,7 +1452,7 @@ static void rcar_canfd_set_bittiming(struct net_device *dev)
 			   brp, sjw, tseg1, tseg2);
 	} else {
 		/* Classical CAN only mode */
-		if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+		if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 			cfg = (RCANFD_V3U_NCFG_NTSEG1(tseg1) |
 			       RCANFD_V3U_NCFG_NBRP(brp) |
 			       RCANFD_V3U_NCFG_NSJW(sjw) |
@@ -1430,7 +1495,7 @@ static int rcar_canfd_start(struct net_device *ndev)
 	}
 
 	/* Enable Common & Rx FIFO */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		addr1 = RCANFD_V3U_CFCC(ch, RCANFD_CFFIFO_IDX);
 		addr2 = RCANFD_V3U_RFCC(ridx);
 	} else {
@@ -1505,7 +1570,7 @@ static void rcar_canfd_stop(struct net_device *ndev)
 	rcar_canfd_disable_channel_interrupts(priv);
 
 	/* Disable Common & Rx FIFO */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		addr1 = RCANFD_V3U_CFCC(ch, RCANFD_CFFIFO_IDX);
 		addr2 = RCANFD_V3U_RFCC(ridx);
 	} else {
@@ -1544,7 +1609,9 @@ static netdev_tx_t rcar_canfd_start_xmit(struct sk_buff *skb,
 	struct rcar_canfd_global *gpriv = priv->gpriv;
 
 	if (can_dropped_invalid_skb(ndev, skb))
+	{
 		return NETDEV_TX_OK;
+	}
 
 	if (cf->can_id & CAN_EFF_FLAG) {
 		id = cf->can_id & CAN_EFF_MASK;
@@ -1554,11 +1621,13 @@ static netdev_tx_t rcar_canfd_start_xmit(struct sk_buff *skb,
 	}
 
 	if (cf->can_id & CAN_RTR_FLAG)
+	{
 		id |= RCANFD_CFID_CFRTR;
+	}
 
 	dlc = RCANFD_CFPTR_CFDLC(can_len2dlc(cf->len));
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		rcar_canfd_write(priv->base,
 				 RCANFD_V3U_CFID(ch, RCANFD_CFFIFO_IDX), id);
 		rcar_canfd_write(priv->base,
@@ -1622,7 +1691,7 @@ static netdev_tx_t rcar_canfd_start_xmit(struct sk_buff *skb,
 	/* Start Tx: Write 0xff to CFPC to increment the CPU-side
 	 * pointer for the Common FIFO
 	 */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 		addr = RCANFD_V3U_CFPCTR(ch, RCANFD_CFFIFO_IDX);
 	else
 		addr = RCANFD_CFPCTR(ch, RCANFD_CFFIFO_IDX);
@@ -1630,6 +1699,7 @@ static netdev_tx_t rcar_canfd_start_xmit(struct sk_buff *skb,
 	rcar_canfd_write(priv->base, addr, 0xff);
 
 	spin_unlock_irqrestore(&priv->tx_lock, flags);
+
 	return NETDEV_TX_OK;
 }
 
@@ -1643,7 +1713,7 @@ static void rcar_canfd_rx_pkt(struct rcar_canfd_channel *priv)
 	u32 ridx = ch + RCANFD_RFFIFO_IDX;
 	struct rcar_canfd_global *gpriv = priv->gpriv;
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		id = rcar_canfd_read(priv->base, RCANFD_V3U_RFID(ridx));
 		dlc = rcar_canfd_read(priv->base, RCANFD_V3U_RFPTR(ridx));
 		if (priv->can.ctrlmode & CAN_CTRLMODE_FD) {
@@ -1707,7 +1777,7 @@ static void rcar_canfd_rx_pkt(struct rcar_canfd_channel *priv)
 			if (sts & RCANFD_RFFDSTS_RFBRS)
 				cf->flags |= CANFD_BRS;
 
-			if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+			if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 				rcar_canfd_get_data(priv, cf,
 						    RCANFD_V3U_RFDF(ridx, 0));
 			else
@@ -1719,7 +1789,7 @@ static void rcar_canfd_rx_pkt(struct rcar_canfd_channel *priv)
 		if (id & RCANFD_RFID_RFRTR)
 			cf->can_id |= CAN_RTR_FLAG;
 		else
-			if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+			if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 				rcar_canfd_get_data(priv, cf,
 						    RCANFD_V3U_RFDF(ridx, 0));
 			else
@@ -1730,7 +1800,7 @@ static void rcar_canfd_rx_pkt(struct rcar_canfd_channel *priv)
 	/* Write 0xff to RFPC to increment the CPU-side
 	 * pointer of the Rx FIFO
 	 */
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0))
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0)
 		rcar_canfd_write(priv->base, RCANFD_V3U_RFPCTR(ridx), 0xff);
 	else
 		rcar_canfd_write(priv->base, RCANFD_RFPCTR(ridx), 0xff);
@@ -1752,7 +1822,7 @@ static int rcar_canfd_rx_poll(struct napi_struct *napi, int quota)
 	u32 ridx = ch + RCANFD_RFFIFO_IDX, addr1, addr2;
 	struct rcar_canfd_global *gpriv = priv->gpriv;
 
-	if ((gpriv->chip_id == R8A779A0) || (gpriv->chip_id == R8A779G0)) {
+	if (gpriv->chip_id == R8A779A0 || gpriv->chip_id == R8A779G0 || gpriv->chip_id == R8A779F0) {
 		addr1 = RCANFD_V3U_RFSTS(ridx);
 		addr2 = RCANFD_V3U_RFCC(ridx);
 	} else {
@@ -1867,15 +1937,15 @@ static int rcar_canfd_channel_probe(struct rcar_canfd_global *gpriv, u32 ch,
 
 	netif_napi_add(ndev, &priv->napi, rcar_canfd_rx_poll,
 		       RCANFD_NAPI_WEIGHT);
+	spin_lock_init(&priv->tx_lock);
+	devm_can_led_init(ndev);
+	gpriv->ch[priv->channel] = priv;
 	err = register_candev(ndev);
 	if (err) {
 		dev_err(&pdev->dev,
 			"register_candev() failed, error %d\n", err);
 		goto fail_candev;
 	}
-	spin_lock_init(&priv->tx_lock);
-	devm_can_led_init(ndev);
-	gpriv->ch[priv->channel] = priv;
 	dev_info(&pdev->dev, "device registered (channel %u)\n", priv->channel);
 	return 0;
 
@@ -1904,7 +1974,8 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 	struct rcar_canfd_global *gpriv;
 	struct device_node *of_child;
 	unsigned long channels_mask = 0;
-	int err, ch_irq, g_irq, i;
+	int err, g_irq, ch_irq, i, num_ch_enabled = 0;
+	int ch_irq_s4[RCANFD_NUM_CHANNELS] = {0, 0, 0, 0, 0, 0, 0, 0};
 	bool fdmode = true;			/* CAN FD only mode - default */
 	const struct rcar_canfd_of_data *of_data;
 	char *name[RCANFD_NUM_CHANNELS] = {
@@ -1925,13 +1996,28 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 			channels_mask |= BIT(i);	/* Channel i */
 	}
 
-	ch_irq = platform_get_irq(pdev, 0);
+	/*	ch_irq = platform_get_irq(pdev, 0);
 	if (ch_irq < 0) {
 		err = ch_irq;
 		goto fail_dev;
 	}
 
 	g_irq = platform_get_irq(pdev, 1);
+	if (g_irq < 0) {
+		err = g_irq;
+		goto fail_dev;
+	} */
+	
+	/* Porting for R8A779F0 */
+	for (i = 0; i < RCANFD_NUM_CHANNELS; i++) {
+		ch_irq_s4[i] = platform_get_irq(pdev, i + 1);
+		if (ch_irq_s4[i] < 0) {
+			err = ch_irq_s4[i];
+			goto fail_dev;
+		}
+	}
+
+	g_irq = platform_get_irq(pdev, 0);
 	if (g_irq < 0) {
 		err = g_irq;
 		goto fail_dev;
@@ -1950,13 +2036,14 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 	gpriv->max_channels = of_data->max_channels;
 
 	/* Peripheral clock */
-	gpriv->clkp = devm_clk_get(&pdev->dev, "fck");
+	/* Porting for R8A779F0, not use fck */
+	/* gpriv->clkp = devm_clk_get(&pdev->dev, "fck");
 	if (IS_ERR(gpriv->clkp)) {
 		err = PTR_ERR(gpriv->clkp);
 		dev_err(&pdev->dev, "cannot get peripheral clock, error %d\n",
 			err);
 		goto fail_dev;
-	}
+	} */
 
 	/* fCAN clock: Pick External clock. If not available fallback to
 	 * CANFD clock
@@ -1971,15 +2058,16 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 			goto fail_dev;
 		}
 		gpriv->fcan = RCANFD_CANFDCLK;
-
 	} else {
 		gpriv->fcan = RCANFD_EXTCLK;
 	}
 	fcan_freq = clk_get_rate(gpriv->can_clk);
 
 	if (gpriv->fcan == RCANFD_CANFDCLK)
+	{
 		/* CANFD clock is further divided by (1/2) within the IP */
 		fcan_freq /= 2;
+	}
 
 	addr = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(addr)) {
@@ -1989,14 +2077,27 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 	gpriv->base = addr;
 
 	/* Request IRQ that's common for both channels */
-	err = devm_request_irq(&pdev->dev, ch_irq,
-			       rcar_canfd_channel_interrupt, 0,
-			       "canfd.chn", gpriv);
+	/*	err = devm_request_irq(&pdev->dev, ch_irq,
+				rcar_canfd_channel_interrupt, 0,
+				"canfd.chn", gpriv);
 	if (err) {
 		dev_err(&pdev->dev, "devm_request_irq(%d) failed, error %d\n",
 			ch_irq, err);
 		goto fail_dev;
+	} */
+
+	/* Porting for R8A779F0 */
+	for (i = 0; i < RCANFD_NUM_CHANNELS; i++) {
+		err = devm_request_irq(&pdev->dev, ch_irq_s4[i],
+					rcar_canfd_channel_interrupt, 0,
+					"canfd.chn", gpriv);
+		if (err) {
+			dev_err(&pdev->dev, "devm_request_irq(%d) failed, error %d\n",
+				ch_irq_s4[i], err);
+			goto fail_dev;
+		}
 	}
+
 	err = devm_request_irq(&pdev->dev, g_irq,
 			       rcar_canfd_global_interrupt, 0,
 			       "canfd.gbl", gpriv);
@@ -2032,7 +2133,8 @@ static int rcar_canfd_probe(struct platform_device *pdev)
 		rcar_canfd_configure_tx(gpriv, ch);
 
 		/* Configure receive rules */
-		rcar_canfd_configure_afl_rules(gpriv, ch);
+		rcar_canfd_configure_afl_rules(gpriv, ch, num_ch_enabled);
+		num_ch_enabled++;
 	}
 
 	/* Configure common interrupts */
@@ -2109,6 +2211,11 @@ static const struct rcar_canfd_of_data of_rcanfd_v4h_compatible = {
 	.max_channels = 8,
 };
 
+static const struct rcar_canfd_of_data of_rcanfd_s4_compatible = {
+	.chip_id = R8A779F0,
+	.max_channels = 8,
+};
+
 static const struct rcar_canfd_of_data of_rcanfd_v3u_compatible = {
 	.chip_id = R8A779A0,
 	.max_channels = 8,
@@ -2124,6 +2231,10 @@ static const struct of_device_id rcar_canfd_of_table[] = {
 		.compatible = "renesas,r8a779g0-canfd",
 		.data = &of_rcanfd_v4h_compatible,
 	},
+	{
+		.compatible = "renesas,r8a779f0-canfd",
+		.data = &of_rcanfd_s4_compatible,
+	},
 	{
 		.compatible = "renesas,r8a779a0-canfd",
 		.data = &of_rcanfd_v3u_compatible,
-- 
2.25.1

